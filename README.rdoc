= sha3  {<img src="https://secure.travis-ci.org/johanns/sha3.png" alt="Build Status" />}[http://travis-ci.org/johanns/sha3] {<img src="https://gemnasium.com/johanns/sha3.png" alt="Dependency Status" />}[https://gemnasium.com/johanns/sha3]

<em>SHA3 for Ruby</em> is a native (C) implementation of Keccak (SHA3) cryptographic hashing algorithm. Platform optimized reference is used, wherever possible.

Home :: https://github.com/johanns/sha3#readme
Issues :: https://github.com/johanns/sha3/issues
Documentation :: http://rubydoc.info/gems/sha3/frames

== Module details

<em>SHA3::Digest</em>: A standard *Digest* _subclass_. The interface, and operation of this class are parallel to digest classes bundled with MRI-based Rubies (e.g.: <em>Digest::SHA2</em>, and <em>OpenSSL::Digest</em>). See *Digest* documentation for additional details (http://www.ruby-doc.org/stdlib-1.9.3/libdoc/digest/rdoc/Digest.html).

<em>SHA3::Digest.compute()</em>: A class-method with data bit-length hashing support.

== Installation

  $ gem install sha3

== Usage

  require 'sha3'

Valid hash bit-lengths are: *224*, *256*, *384*, *512*. You may also use corresponding symbols when instantiating a new instance or calling the <em>SHA3::Digest.compute()</em> method: 
  
  :sha224  :sha256  :sha384  :sha512

  # SHA3::Digest.new(224) is SHA3::Digest.new(:sha224)
  
Alternatively, you can instantiate using one of four sub-classes:

  SHA3::Digest::SHA224.new() # 224 bits
  SHA3::Digest::SHA256.new() # 256 bits
  SHA3::Digest::SHA384.new() # 384 bits
  SHA3::Digest::SHA512.new() # 512 bits

=== Basics
  
  # Instantiate a new SHA3::Digest class with 256 bit length
  s = SHA3::Digest.new(:sha256)
  
  # OR #
  
  s = SHA3::Digest::SHA256.new()
  
  # Update hash state, and compute new value
  s.update "Compute Me"
  
  # << is an .update() alias
  s << "Me too"
  
  # Returns digest value in bytes
  s.digest
  # => "\xBE\xDF\r\xD9\xA1[dt \x8BbLN\x8A\x1Eg,\xE0\xF0d\x98\xE3\xAB\xD7\xCC7\xF0\xAEiu\x92Y"
   
  # Returns digest value as hex string
  s.hexdigest
  # => "bedf0dd9a15b6474208b624c4e8a1e672ce0f06498e3abd7cc37f0ae69759259"

  ### Digest class-methods: ###
  
  SHA3::Digest.hexdigest("Hash me, please", :sha224)
  # => "200e7bc18cd6132689eb8fa3f7c3a978d73215384a626c23e4508f33"

  SHA3::Digest::SHA384.digest("Hash me, please")
  # => "\xF5\xCEpC\xB0eV\xA3\x92P\xF8\x93\xB8\x145\x19\x1A)\xB1\x88\xBF\a\a7\x88\f\xFETI\e\x17\x80\xEC\xA6}\xABR\xAE\xAFK\xFF|d\x81\xF7\xB5\x9Ah"

=== Hashing a file

  # Compute the hash value for given file, and return the result as hex
  s = SHA3::Digest::SHA224.file("my_fantastical_file.bin").hexdigest

  # Calling SHA3::Digest.file(...) defaults to SHA256
  s = SHA3::Digest.file("tests.sh")
  # => #<SHA3::Digest: a9801db49389339bd8a62817f229f0f9394ca73b34fd7dbc7ec5ed7a99bc49f1>

=== Bit-length hashing
  
  # Compute hash of "011"
  SHA3::Digest.compute(:sha224, "\xC0", 3).unpack("H*")
  # => ["2b695a6fd92a2b3f3ce9cfca617d22c9bb52815dd59a9719b01bad25"]

== Development

* Native build tools (e.g., GCC, Minigw, etc.)
* Gems: rubygems-tasks, rake, rspec, yard

== Testing + RSpec

Call +rake+ to run the included RSpec tests.

Only a small subset of test vectors are included in the source repository; however, the complete test vectors suite is available for download. Simply run the +tests.sh+ shell script (available in the root of source directory) to generate full bit-length RSpec test files.

  sh tests.sh

== Rubies

Tested with Rubies:

  - MRI 1.9.3
  - MRI 1.9.2
  - MRI 1.8.7
  - MRI Ruby-Head
  - Rubinius (18mode)
  - Rubinius (19mode)
  - ree

On:

  - Ubuntu 12.04, 12.10
  - Windows 7, 8
  - Mac OS X 10.8

== Releases

*0.1.x* :: Alpha code, and not suitable for production.
*0.2.0* :: Production worthy, but breaks API compatibility with 0.1.x. Backward-compatibility will be maintained henceforth.
*0.2.2* :: Added sub-class for each SHA3 supported bit-lengths (example: SHA3::Digest::SHA256). Minor bug fix.
*0.2.3* :: Added documentation file (decoupled form C source); refactored C source.

== TO DO:

* Add support for arbitrary length hashes.
* Add hex output support to compute method.

== Copyright

Copyright (c) 2012 Johanns Gregorian (https://github.com/johanns)

See LICENSE.txt for details.
